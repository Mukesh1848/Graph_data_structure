#include<unordered_map>
#include<list>
#include<queue>


bool isCycleBFS(int src,unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj)
{
    unordered_map<int,int>parent;
    queue<int>q;
    
    parent[src] =-1;
    visited[src] =1;
    q.push(src);

    while(!q.empty()){
        int front =q.front();
        q.pop();

        for(auto neighbour :adj[front]){
            if(visited[neighbour]==true && neighbour != parent[front]){
               return true; 
            } 
            else if (!visited[neighbour]) {
                q.push(neighbour);
                visited[neighbour] =1;
                parent[neighbour] = front;
            }
        }
    }
   return false;   
}

// bool isCycleDFS(int src,int parent ,unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj){

//       visited[src] = true; 

//   for(auto neighbour : adj[src]){
//     if (!visited[neighbour]){
//       bool cycleDected = isCycleDFS(neighbour, src, visited, adj);
//             if (cycleDected)
//                 return true;
                
//     } 
//     else if(neighbour != parent) {
//       return true;
//     }
    
//   }
//   return false;
// }

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
      unordered_map<int,list<int>>adj;
        // prepare adjacent list
    for(int i=0;i<m;i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // track disconnect component of graph
        unordered_map<int,bool> visited;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                bool ans = isCycleBFS(i,visited,adj);
                // bool ans = isCycleBFS(i,-1,visited,adj); // for DFS function 
                if(ans == 1){
                    return "Yes";
                }
            }
        }
        return "No";
}

