#include<list>
#include<unordered_map>

bool checkCycle(int node,unordered_map<int,bool>&visited,unordered_map<int,bool>&dfsVisited,
unordered_map<int,list<int>>&adj){

   visited[node] =1;
   dfsVisited[node]=1;

   for(auto neighbour : adj[node]){
     if(!visited[neighbour]){
       bool cycleDetected =checkCycle(neighbour,visited,dfsVisited,adj);
       if(cycleDetected)
       return true;
     }
     else if(dfsVisited[neighbour]){
       return true;
     }
   }
   dfsVisited[node] = false;
   return false;
}


int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  
  unordered_map<int,list<int>> adj;
  unordered_map<int,bool>visited;
  unordered_map<int,bool>dfsVisited;
  


  for(int i=0;i<edges.size();i++){
       
       int u = edges[i].first;
       int v = edges[i].second;

       adj[u].push_back(v);
  }

  for(int i=1;i<=n;i++){
    if(!visited[i]){
    bool  cycleFount = checkCycle(i,visited,dfsVisited,adj);

          if(cycleFount)
          return true;
      }
    } 
  return false;
}
